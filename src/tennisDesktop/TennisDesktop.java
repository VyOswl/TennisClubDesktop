/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tennisDesktop;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.sql.*;
import java.util.Arrays;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author vyphan
 */
public class TennisDesktop extends javax.swing.JFrame {
    public DefaultTableModel modelJ;
    public DefaultTableModel modelT;
    public DefaultTableModel modelM;
    public DefaultTableModel modelM2;
    public DefaultTableModel modelE;
    public DefaultTableModel modelE2;
    public Conn con;
    public Boolean isNom;
    public Boolean isPrenom;
    //private final TableRowSorter<TableModel> rowSorter = new TableRowSorter<>(modelJ);

    public TennisDesktop() {
        initComponents();
        modelJ = (DefaultTableModel) tabJ.getModel();
        modelT = (DefaultTableModel) tabT.getModel();
        modelM = (DefaultTableModel) tabM1.getModel();
        modelM2 = (DefaultTableModel) TabM2.getModel();
        modelE = (DefaultTableModel) tabE1.getModel();
        modelE2 = (DefaultTableModel) tabE2.getModel();
        con = new Conn();
        isNom = rbNomM.isSelected();
        isPrenom = rbPrenomM.isSelected();
            updateJ();
            updateT();
            updateM();
            updateE();
            setLocationRelativeTo(null);
            this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    private void initComponents() {
        btnSearchJ = new JButton(new ImageIcon(ClassLoader.getSystemResource("Images/search.png")));
        btnAddJ = new JButton(new ImageIcon(ClassLoader.getSystemResource("Images/add.png")));
        btnEditJ = new JButton(new ImageIcon(ClassLoader.getSystemResource("Images/edit.png")));
        btnDelJ = new JButton(new ImageIcon(ClassLoader.getSystemResource("Images/del.png")));
        btnReJ = new JButton(new ImageIcon(ClassLoader.getSystemResource("Images/refresh.png")));
        btnSearchT = new JButton(new ImageIcon(ClassLoader.getSystemResource("Images/search.png")));
        btnAddT = new JButton(new ImageIcon(ClassLoader.getSystemResource("Images/add.png")));
        btnEditT = new JButton(new ImageIcon(ClassLoader.getSystemResource("Images/edit.png")));
        btnDelT = new JButton(new ImageIcon(ClassLoader.getSystemResource("Images/del.png")));
        btnReT = new JButton(new ImageIcon(ClassLoader.getSystemResource("Images/refresh.png")));
        btnVqM =  new JButton(new ImageIcon(ClassLoader.getSystemResource("Images/vainqueur.png")));
        btnFiM =  new JButton(new ImageIcon(ClassLoader.getSystemResource("Images/finaliste.png")));
        btnSearchM = new JButton(new ImageIcon(ClassLoader.getSystemResource("Images/search.png")));
        btnReM = new JButton(new ImageIcon(ClassLoader.getSystemResource("Images/refresh.png")));
        btnSearchE = new JButton(new ImageIcon(ClassLoader.getSystemResource("Images/search.png")));
        btnReE = new JButton(new ImageIcon(ClassLoader.getSystemResource("Images/refresh.png")));
        buttonGroup1 = new javax.swing.ButtonGroup();
        rbH = new javax.swing.JRadioButton();
        rbF = new javax.swing.JRadioButton();
        buttonGroup2 = new javax.swing.ButtonGroup();
        rbNomM = new javax.swing.JRadioButton();
        rbPrenomM = new javax.swing.JRadioButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabJ = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfIdJ = new javax.swing.JTextField();
        tfNomJ = new javax.swing.JTextField();
        tfPrenomJ = new javax.swing.JTextField();
        tfSearchJ = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        cboxSexe = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabT = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tfIdT = new javax.swing.JTextField();
        tfNomT = new javax.swing.JTextField();
        tfCodeT = new javax.swing.JTextField();
        tfSearchT = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabM1 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        TabM2 = new javax.swing.JTable();
        tfSearchM = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabE1 = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tfYrE = new javax.swing.JTextField();
        tfTypeE = new javax.swing.JTextField();
        jScrollPane6 = new javax.swing.JScrollPane();
        tabE2 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabJ.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOM", "PRENOM", "SEXE"
            }
        ));
        tabJ.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabJMouseClicked(evt);
            }
        });
        
        jScrollPane1.setViewportView(tabJ);

        jLabel1.setText("ID");

        jLabel2.setText("NOM");

        jLabel3.setText("PRENOM");
        
        
        btnSearchJ.setText("Chercher");
        btnSearchJ.addActionListener((ActionEvent evt) -> {
            btnSearchJActionPerformed(evt);
        });

        btnAddJ.setText("Ajouter");
        btnAddJ.addActionListener((ActionEvent evt) -> {
            btnAddJActionPerformed(evt);
        });

        btnEditJ.setText("Modifier");
        btnEditJ.addActionListener((java.awt.event.ActionEvent evt) -> {
            btnEditJActionPerformed(evt);
        });

        btnDelJ.setText("Supprimer");
        btnDelJ.addActionListener((java.awt.event.ActionEvent evt) -> {
            btnDelJActionPerformed(evt);
        });

        buttonGroup1.add(rbH);
        rbH.setText("Homme");
        rbH.addActionListener((java.awt.event.ActionEvent evt) -> {
            rbHActionPerformed(evt);
        });

        buttonGroup1.add(rbF);
        rbF.setText("Femme");
        rbF.addActionListener((java.awt.event.ActionEvent evt) -> {
            rbFActionPerformed(evt);
        });
        
        btnReJ.setText("RefraÃ®chir");
        btnReJ.addActionListener((java.awt.event.ActionEvent evt) -> {
            btnReJActionPerformed(evt);
        });

        jLabel9.setText("SEXE");
        cboxSexe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Homme", "Femme" }));
        
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSearchJ))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(52, 52, 52)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel9))
                                        .addGap(42, 42, 42)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tfIdJ)
                                            .addComponent(tfNomJ)
                                            .addComponent(tfPrenomJ)
                                            //.addComponent(tfSexeJ)))
                                            .addComponent(cboxSexe)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(40, 40, 40)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(btnAddJ)
                                                .addGap(28, 28, 28)
                                                .addComponent(btnEditJ)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnDelJ))
                                            .addComponent(tfSearchJ, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(71, 71, 71)
                                        .addComponent(rbH)
                                        .addGap(59, 59, 59)
                                        .addComponent(rbF)))
                                .addGap(0, 46, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReJ))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSearchJ)
                            .addComponent(tfSearchJ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbH)
                            .addComponent(rbF))
                        .addGap(84, 84, 84)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(tfIdJ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(tfNomJ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(tfPrenomJ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(cboxSexe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddJ)
                            .addComponent(btnEditJ)
                            .addComponent(btnDelJ))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReJ)
                        .addContainerGap())
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Joueurs", jPanel1);

        tabT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOM", "CODE"
            }
        ));
        tabT.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabTMouseClicked(evt);
            }
        });
        
        jScrollPane2.setViewportView(tabT);

        jLabel4.setText("ID");

        jLabel5.setText("NOM");

        jLabel6.setText("CODE");

        btnSearchT.setText("Chercher");
        btnSearchT.addActionListener((java.awt.event.ActionEvent evt) -> {
            btnSearchTActionPerformed(evt);
        });

        btnAddT.setText("Ajouter");
        btnAddT.addActionListener((java.awt.event.ActionEvent evt) -> {
            btnAddTActionPerformed(evt);
        });

        btnEditT.setText("Modifier");
        btnEditT.addActionListener((java.awt.event.ActionEvent evt) -> {
            btnEditTActionPerformed(evt);
        });

        btnDelT.setText("Supprimer");
        btnDelT.addActionListener((java.awt.event.ActionEvent evt) -> {
            btnDelTActionPerformed(evt);
        });

        btnReT.setText("RefraÃ®chir");
        btnReT.addActionListener((java.awt.event.ActionEvent evt) -> {
            btnReTActionPerformed(evt);
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(btnAddT)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEditT)
                        .addGap(37, 37, 37)
                        .addComponent(btnDelT))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfIdT)
                            .addComponent(tfNomT)
                            .addComponent(tfCodeT)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(tfSearchT, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSearchT))
                            .addComponent(btnReT, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfSearchT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearchT))
                        .addGap(128, 128, 128)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(tfIdT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(tfNomT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(tfCodeT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddT)
                            .addComponent(btnEditT)
                            .addComponent(btnDelT))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReT))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Tournois", jPanel2);

        tabM1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "ID_EPREUVE", "ID_VAINQUEUR", "ID_FINALISTE"
            }
        ));
        jScrollPane3.setViewportView(tabM1);

        TabM2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NOM", "PRENOM", "SEXE"
            }
        ));
        jScrollPane4.setViewportView(TabM2);

        btnSearchM.setText("Chercher");
        btnSearchM.addActionListener((java.awt.event.ActionEvent evt) -> {
            btnSearchMActionPerformed(evt);
        });
             
        buttonGroup2.add(rbNomM);
        rbNomM.setText("Nom");
        rbNomM.addActionListener((java.awt.event.ActionEvent evt) -> {
            rbNomMActionPerformed(evt);
        });

        buttonGroup2.add(rbPrenomM);
        rbPrenomM.setText("Prenom");
        rbPrenomM.addActionListener((java.awt.event.ActionEvent evt) -> {
            rbPrenomMActionPerformed(evt);
        });

        btnVqM.setText("Vainqueurs");
        btnVqM.addActionListener((java.awt.event.ActionEvent evt) -> {
            btnVqMActionPerformed(evt);
        });

        btnFiM.setText("Finalistes");
        btnFiM.addActionListener((java.awt.event.ActionEvent evt) -> {
            btnFiMActionPerformed(evt);
        });

        btnReM.setText("RefraÃ®chir");
        btnReM.addActionListener((java.awt.event.ActionEvent evt) -> {
            btnReMActionPerformed(evt);
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnVqM)
                                .addComponent(btnFiM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(btnReM, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(tfSearchM, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(rbNomM)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbPrenomM)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearchM)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfSearchM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbNomM)
                    .addComponent(rbPrenomM)
                    .addComponent(btnSearchM))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
                    .addComponent(jScrollPane4)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnVqM)
                        .addGap(18, 18, 18)
                        .addComponent(btnFiM)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReM)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Matchs", jPanel3);

        tabE1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "ANNEE", "TYPE_EPREUVE", "ID_TOURNOI"
            }
        ));
        jScrollPane5.setViewportView(tabE1);

        jLabel7.setText("AnnÃ©e");

        jLabel8.setText("Type d'Ã©preuve");

        btnSearchE.setText("Chercher");
        btnSearchE.addActionListener((java.awt.event.ActionEvent evt) -> {
            btnSearchEActionPerformed(evt);
        });
   
        btnReE.setText("RefraÃ®chir");
        btnReE.addActionListener((java.awt.event.ActionEvent evt) -> {
            btnReEActionPerformed(evt);
        });

        tabE2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NOM", "PRENOM"
            }
        ));
        jScrollPane6.setViewportView(tabE2);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(btnSearchE)
                                .addContainerGap())
                            .addComponent(btnReE, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel7))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfYrE)
                                    .addComponent(tfTypeE)))
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(tfYrE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(tfTypeE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addComponent(btnSearchE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Epreuves", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        /*
        jTabbedPane1.setBackgroundAt(0, Color.decode("#88BFA3"));
        jTabbedPane1.setBackgroundAt(1, Color.decode("#C2DACE"));
        jTabbedPane1.setBackgroundAt(2, Color.decode("#FEEDAA"));
        jTabbedPane1.setBackgroundAt(3, Color.decode("#EEC9B0"));
        */
        jTabbedPane1.setBackgroundAt(0, new java.awt.Color(90,125,110));
        jTabbedPane1.setBackgroundAt(1, new java.awt.Color(120, 180, 145));
        jTabbedPane1.setBackgroundAt(2, new java.awt.Color(90,125,110));
        jTabbedPane1.setBackgroundAt(3, new java.awt.Color(120, 180, 145));
            
        tabJ.getTableHeader().setBackground(Color.decode("#789d8d"));
        tabJ.getTableHeader().setForeground(Color.white);
        tabJ.getTableHeader().setFont(new java.awt.Font("Noto Sans Oriya", 0, 12));
        
        tabT.getTableHeader().setBackground(Color.decode("#789d8d"));
        tabT.getTableHeader().setForeground(Color.white);
        tabT.getTableHeader().setFont(new java.awt.Font("Noto Sans Oriya", 0, 12));
        
        tabM1.getTableHeader().setBackground(Color.decode("#789d8d"));
        tabM1.getTableHeader().setFont(new java.awt.Font("Noto Sans Oriya", 0, 12));
        tabM1.getTableHeader().setForeground(Color.white);
        TabM2.getTableHeader().setBackground(Color.decode("#789d8d"));
        TabM2.getTableHeader().setFont(new java.awt.Font("Noto Sans Oriya", 0, 12));
        TabM2.getTableHeader().setForeground(Color.white);
        
        tabE1.getTableHeader().setBackground(Color.decode("#789d8d"));
        tabE1.getTableHeader().setFont(new java.awt.Font("Noto Sans Oriya", 0, 12));
        tabE1.getTableHeader().setForeground(Color.white);
        tabE2.getTableHeader().setBackground(Color.decode("#789d8d"));
        tabE2.getTableHeader().setFont(new java.awt.Font("Noto Sans Oriya", 0, 12));  
        tabE2.getTableHeader().setForeground(Color.white);

        jPanel1.setBackground(Color.decode("#B7D0C1"));
        jPanel2.setBackground(Color.decode("#B7D0C1"));
        jPanel3.setBackground(Color.decode("#B7D0C1"));
        jPanel4.setBackground(Color.decode("#B7D0C1"));
        /*
        jScrollPane2.setBackground(Color.decode("#B7D0C1"));
        jScrollPane1.setBackground(Color.decode("#B7D0C1"));
        jScrollPane3.setBackground(Color.decode("#B7D0C1"));
        jScrollPane4.setBackground(Color.decode("#B7D0C1"));
        jScrollPane5.setBackground(Color.decode("#B7D0C1"));
        jScrollPane6.setBackground(Color.decode("#B7D0C1"));
        */
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateJ() {
        modelJ.setRowCount(0);
        try {
            ResultSet rs = con.s.executeQuery("SELECT * FROM JOUEUR");
            while(rs.next()){
                String[] line = {
                    rs.getString("ID"), rs.getString("NOM"), rs.getString("PRENOM"), rs.getString("SEXE")
                };
                modelJ.addRow(line);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void updateT() {
        modelT.setRowCount(0);
        try {
            ResultSet rs = con.s.executeQuery("SELECT * FROM TOURNOI");
            while(rs.next()){
                String[] line = {
                    rs.getString("ID"), rs.getString("NOM"), rs.getString("CODE")
                };
                modelT.addRow(line);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void updateM() {
        modelM.setRowCount(0);
        try {
            ResultSet rs = con.s.executeQuery("SELECT * FROM MATCH_TENNIS");
            while(rs.next()){
                String[] line = {
                    rs.getString("ID"), rs.getString("ID_EPREUVE"), rs.getString("ID_VAINQUEUR"), rs.getString("ID_FINALISTE")
                };
                modelM.addRow(line);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void updateE() {
        modelE.setRowCount(0);
        try {
            ResultSet rs = con.s.executeQuery("SELECT * FROM EPREUVE");
            while(rs.next()){
                 String[] line = {
                    rs.getString("ID"), rs.getString("ANNEE"), rs.getString("TYPE_EPREUVE"), rs.getString("ID_TOURNOI")
                };
                modelE.addRow(line);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void tabJMouseClicked(java.awt.event.MouseEvent evt) {                                     
        // Get the selected row from the table.
        int row = tabJ.getSelectedRow();
        tabJ.setSelectionBackground(Color.decode("#789d8d"));
        tfIdJ.setText(tabJ.getValueAt(row,0).toString());
        tfNomJ.setText(tabJ.getValueAt(row,1).toString());
        tfPrenomJ.setText(tabJ.getValueAt(row,2).toString());
        if (tabJ.getValueAt(row, 3).toString().equals("H")) {
            cboxSexe.setSelectedIndex(0);
        } else {
            cboxSexe.setSelectedIndex(1);
        }
    }
    
    private void tabTMouseClicked(java.awt.event.MouseEvent evt) {                                     
          int row = tabT.getSelectedRow();
          tabT.setSelectionBackground(Color.decode("#789d8d"));
          for(int i = 0; i < tabT.getColumnCount(); i++) {
              tfIdT.setText(tabT.getValueAt(row,0).toString());
              tfNomT.setText(tabT.getValueAt(row,1).toString());
              tfCodeT.setText(tabT.getValueAt(row,2).toString());
          }
    }
    
    
    private void btnSearchJActionPerformed(ActionEvent evt) {
        try{
            String txt = tfSearchJ.getText();
            String query = "SELECT * FROM joueur WHERE (Nom LIKE '%"+ txt +"%' OR Prenom LIKE '%"+ txt +"%')";
            
            if(!txt.equals("")){
                buttonGroup1.clearSelection();
                modelJ.setRowCount(0);
                ResultSet rs = con.s.executeQuery(query);
   
                while(rs.next()){
                    String[] line = {
                        rs.getString("ID"), rs.getString("NOM"), rs.getString("PRENOM"), rs.getString("SEXE")
                    };
                    modelJ.addRow(line);
                }
            }
        }catch (Exception e){
           JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void rbHActionPerformed(ActionEvent evt) {
        try{
            String txt = tfSearchJ.getText();
            ResultSet rs;
            modelJ.setRowCount(0);
            if(txt.equals("")){
                rs = con.s.executeQuery("SELECT * FROM joueur WHERE sexe = 'H';");
            } else {
                rs = con.s.executeQuery("SELECT * FROM joueur WHERE sexe = 'H' AND (nom LIKE '%"+ txt +"%' OR prenom LIKE '%"+ txt +"%');");
            }
            while(rs.next()){
                String[] line = {
                    rs.getString("ID"), rs.getString("NOM"), rs.getString("PRENOM"), rs.getString("SEXE")
                };
                modelJ.addRow(line);
            }
        }catch (Exception e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void rbFActionPerformed(ActionEvent evt) {
        try{
            String txt = tfSearchJ.getText();
            modelJ.setRowCount(0);
            ResultSet rs;
            if(txt.equals("")){
                rs = con.s.executeQuery("SELECT * FROM joueur WHERE sexe = 'F';");
            } else {
                rs = con.s.executeQuery("SELECT * FROM joueur WHERE sexe = 'F' AND (nom LIKE '%"+ txt +"%' OR prenom LIKE '%"+ txt +"%');");
            }
            while(rs.next()){
                String[] line = {
                    rs.getString("ID"), rs.getString("NOM"), rs.getString("PRENOM"), rs.getString("SEXE")
                };
                modelJ.addRow(line);
            }
        }catch (Exception e){
            JOptionPane.showMessageDialog(null, e.toString());;
        }
    }
    
    public boolean checkJoueurExist(String nom, String prenom) {
        boolean joueurExists = false;
        try {
            //String SQL = "SELECT * FROM JOUEUR WHERE nom = ? AND prenom = ?";
            ResultSet rs = con.s.executeQuery("SELECT * FROM JOUEUR WHERE nom = '"+nom+ "' AND prenom = '" +prenom+ "';");
            joueurExists = rs.next();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        }
        return joueurExists;
    }
    
    private void btnAddJActionPerformed(ActionEvent evt) {
        String nom = tfNomJ.getText();
        String prenom = tfPrenomJ.getText();
        char sexe = cboxSexe.getSelectedItem().toString().charAt(0);
        String q;
   
        try {
            Boolean userExist = checkJoueurExist(nom, prenom);
            if (userExist != true) {
                if (tfIdJ.getText().equals("")) {
                    q = "INSERT INTO joueur(nom, prenom, sexe) VALUES ('" + nom + "', '" + prenom + "', '" + sexe + "');";
                } else {
                    int id = Integer.parseInt(tfIdJ.getText());
                    q = "INSERT INTO joueur VALUES ("
                            + id + ", '" + nom + "', '" + prenom + "', '" + sexe + "');";
                }
                modelJ.setRowCount(0);
                con.s.executeUpdate(q);
                JOptionPane.showMessageDialog(null, "Joueur ajoutÃ©");
                updateJ();
            } else {
                JFrame frame = new JFrame();
                String[] options = new String[2];
                options[0] = "Annuler";
                options[1] = "Oui";
                
                //int response = JOptionPane.showConfirmDialog(null, "Data existed. Continue anyway?", "Confirm",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                int response = JOptionPane.showOptionDialog(frame.getContentPane(), "Data existed. Continue anyway?", "Confirm", 0, JOptionPane.INFORMATION_MESSAGE, null, options, null);
                switch (response) {
                    case 0:
                        //System.out.println("No button clicked");
                        break;
                    case 1:
                        if (tfIdJ.getText().equals("")) {
                            q = "INSERT INTO joueur(nom, prenom, sexe) VALUES ('" + nom + "', '" + prenom + "', '" + sexe + "');";
                        } else {
                            int id = Integer.parseInt(tfIdJ.getText());
                            q = "INSERT INTO joueur VALUES ("
                                    + id + ", '" + nom + "', '" + prenom + "', '" + sexe + "');";
                        }
                        modelJ.setRowCount(0);
                        con.s.executeUpdate(q);
                        JOptionPane.showMessageDialog(null, "Joueur ajoutÃ©");
                        updateJ();
                        break;
                    case JOptionPane.CLOSED_OPTION:
                        System.out.println("JOptionPane closed");
                        break;
                    default:
                        break;
                }
                //JOptionPane.showConfirmDialog(null, "Profile is already existed", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void btnEditJActionPerformed(ActionEvent evt) {
        int row = tabJ.getSelectedRow();
        int id = Integer.parseInt(tabJ.getValueAt(row,0).toString());
        int newId = Integer.parseInt(tfIdJ.getText());
        String nom = tfNomJ.getText();
        String prenom = tfPrenomJ.getText();
        char sexe = cboxSexe.getSelectedItem().toString().charAt(0);
        String q = "UPDATE JOUEUR SET ID=" + newId + ", NOM='"+nom+"', PRENOM='"+prenom+"', SEXE='" +sexe+ "' WHERE id="+id+";";
        System.out.println(q);
        try {
            con.s.executeUpdate(q);
            modelJ.setRowCount(0);
            JOptionPane.showMessageDialog(null, "Joueur modifiÃ©");
            updateJ();
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void btnDelJActionPerformed(ActionEvent evt) {
        int row = tabJ.getSelectedRow();
        int id = Integer.parseInt(tabJ.getValueAt(row,0).toString());
        String q1 = "SET FOREIGN_KEY_CHECKS = 0;",
               q2 = "DELETE from JOUEUR WHERE id="+id+";",
               q3 = "SET FOREIGN_KEY_CHECKS = 1;";
        try {
            
            JFrame frame = new JFrame();
                String[] options = new String[2];
                options[0] = "Annuler";
                options[1] = "Oui";
                
                //int response = JOptionPane.showConfirmDialog(null, "Data existed. Continue anyway?", "Confirm",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                int response = JOptionPane.showOptionDialog(frame.getContentPane(), "Voulez-vous vraiment supprimer ce joueur?", "Confirm", 0, JOptionPane.INFORMATION_MESSAGE, null, options, null);
                switch (response) {
                    case 0:
                        //System.out.println("No button clicked");
                        break;
                    case 1:
                        con.s.executeUpdate(q1);
            con.s.executeUpdate(q2);
            con.s.executeUpdate(q3);
            JOptionPane.showMessageDialog(null, "Tournoi supprimÃ©");
            modelJ.setRowCount(0);
            updateJ();
                        break;
                    case JOptionPane.CLOSED_OPTION:
                        System.out.println("JOptionPane closed");
                        break;
                    default:
                        break;
                }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void btnReJActionPerformed(ActionEvent evt) {
        updateJ();
        buttonGroup1.clearSelection();
        tfIdJ.setText("");
        tfNomJ.setText("");
        tfPrenomJ.setText("");
    }
    
    private void btnSearchTActionPerformed(ActionEvent evt) {
        try{
            String txt = tfSearchT.getText();
            String query = "SELECT * FROM Tournoi WHERE (Nom LIKE '%"+ txt +"%' OR Code LIKE '%"+ txt +"%')";
            
            if(!txt.equals("")){
                modelT.setRowCount(0);
                ResultSet rs = con.s.executeQuery(query);
                while(rs.next()){
                    String[] line = {
                        rs.getString("ID"), rs.getString("NOM"), rs.getString("CODE")
                    };
                    modelT.addRow(line);
                }
            }
        }catch (Exception e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    public boolean checkTournoiExist(String nom, String code) {
        boolean tournoiExists = false;
        try {
            ResultSet rs = con.s.executeQuery("SELECT * FROM Tournoi WHERE nom = '"+nom+ "' AND code = '" +code+ "';");
            tournoiExists = rs.next();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        }
        return tournoiExists;
    }
    
    private void btnAddTActionPerformed(ActionEvent evt) {
        String nom = tfNomT.getText();
        String code = tfCodeT.getText();
        String q;
        
        try {
            Boolean tournoiExist = checkTournoiExist(nom, code);
            if (tournoiExist != true) {
                if (tfIdT.getText().equals("")) {
                    q = "INSERT INTO Tournoi(nom, code) VALUES ('" + nom + "', '" + code + "');";
                } else {
                    int id = Integer.parseInt(tfIdT.getText());
                    q = "INSERT INTO Tournoi VALUES ("+ id + ", '" + nom + "', '" + code + "');";
                }
                modelT.setRowCount(0);
                con.s.executeUpdate(q);
                JOptionPane.showMessageDialog(null, "Tournoi ajoutÃ©");
                updateT();
            } else {
                JFrame frame = new JFrame();
                String[] options = new String[2];
                options[0] = "Annuler";
                options[1] = "Oui";
                
                //int response = JOptionPane.showConfirmDialog(null, "Data existed. Continue anyway?", "Confirm",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                int response = JOptionPane.showOptionDialog(frame.getContentPane(), "Data existed. Continue anyway?", "Confirm", 0, JOptionPane.INFORMATION_MESSAGE, null, options, null);
                switch (response) {
                    case 0:
                        break;
                    case 1:
                        if (tfIdT.getText().equals("")) {
                            q = "INSERT INTO Tournoi(nom, code) VALUES ('" + nom + "', '" + code + "');";
                        } else {
                            int id = Integer.parseInt(tfIdT.getText());
                            q = "INSERT INTO Tournoi VALUES ("+ id + ", '" + nom + "', '" + code + "');";
                        }
                        modelT.setRowCount(0);
                        con.s.executeUpdate(q);
                        JOptionPane.showMessageDialog(null, "Tournoi ajoutÃ©");
                        updateT();
                        break;
                    case JOptionPane.CLOSED_OPTION:
                        System.out.println("JOptionPane closed");
                        break;
                    default:
                        break;
                }
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }    
    
    private void btnEditTActionPerformed(ActionEvent evt) {
        int row = tabT.getSelectedRow();
        int id = Integer.parseInt(tabT.getValueAt(row,0).toString());
        int newId = Integer.parseInt(tfIdT.getText());
        String nom = tfNomT.getText();
        String code = tfCodeT.getText();
        String q = "UPDATE Tournoi SET Id=" +id+ ", Nom='" +nom+ "', Code='" +code+ "' WHERE id="+id+";";
        try {
            con.s.executeUpdate(q);
            modelT.setRowCount(0);
            JOptionPane.showMessageDialog(null, "Tournoi modifiÃ©");
            updateT();
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void btnDelTActionPerformed(ActionEvent evt) {
        int row = tabT.getSelectedRow();
        int id = Integer.parseInt(tabT.getValueAt(row,0).toString());
        String q1 = "SET FOREIGN_KEY_CHECKS = 0;",
               q2 = "DELETE from Tournoi WHERE id="+id+";",
               q3 = "SET FOREIGN_KEY_CHECKS = 1;";
        try {
            JFrame frame = new JFrame();
            String[] options = new String[2];
            options[0] = "Annuler";
            options[1] = "Oui";
                
            //int response = JOptionPane.showConfirmDialog(null, "Data existed. Continue anyway?", "Confirm",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            int response = JOptionPane.showOptionDialog(frame.getContentPane(), "Voulez-vous vraiment supprimer ce tournoi?", "Confirm", 0, JOptionPane.INFORMATION_MESSAGE, null, options, null);
            switch (response) {
                case 0:
                   //System.out.println("No button clicked");
                    break;
                case 1:
                    con.s.executeUpdate(q1);
                    con.s.executeUpdate(q2);
                    con.s.executeUpdate(q3);
                    JOptionPane.showMessageDialog(null, "Tournoi supprimÃ©");
                    modelT.setRowCount(0);
                    updateT();
                    break;
                case JOptionPane.CLOSED_OPTION:
                    System.out.println("JOptionPane closed");
                    break;
                default:
                   break;
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void btnReTActionPerformed(ActionEvent evt) {
        updateT();
        tfSearchT.setText("");
        tfIdT.setText("");
        tfNomT.setText("");
        tfCodeT.setText("");
    }
    
    private void rbNomMActionPerformed(ActionEvent evt) {
        isNom = true;
        isPrenom = false;
    }
    
    private void rbPrenomMActionPerformed(ActionEvent evt) {
        isPrenom = true;
        isNom = false;
    }
    
    private void btnSearchMActionPerformed(ActionEvent evt) {
        try{
            String txt = tfSearchM.getText();
            String query;
            
            if(!txt.equals("")){
                modelM.setRowCount(0);
                modelM2.setRowCount(0);
                if (isNom) {
                    query = "SELECT * FROM MATCH_TENNIS WHERE ID_VAINQUEUR IN (SELECT ID FROM JOUEUR WHERE NOM LIKE '%"
                        + txt + "%') OR ID_FINALISTE IN (SELECT ID FROM JOUEUR WHERE NOM LIKE '%"
                        + txt + "%');";
                } else if (isPrenom){
                    query = "SELECT * FROM MATCH_TENNIS WHERE ID_VAINQUEUR IN (SELECT ID FROM JOUEUR WHERE PRENOM LIKE '%"
                        + txt + "%') OR ID_FINALISTE IN (SELECT ID FROM JOUEUR WHERE PRENOM LIKE '%"
                        + txt + "%');";
                } else {
                    query = "SELECT * FROM MATCH_TENNIS WHERE ID_VAINQUEUR IN (SELECT ID FROM JOUEUR WHERE NOM LIKE '%"
                        + txt + "%' OR PRENOM LIKE '%" + txt + "%') OR ID_FINALISTE IN (SELECT ID FROM JOUEUR WHERE NOM LIKE '%"
                        + txt + "%' OR PRENOM LIKE '%" + txt + "%');";
                }
                System.out.println(query);
                System.out.println(isNom);
                System.out.println(isPrenom);
                ResultSet rs = con.s.executeQuery(query);
   
                while(rs.next()){
                    String[] line = {
                        rs.getString("ID"), rs.getString("ID_EPREUVE"), rs.getString("ID_VAINQUEUR"), rs.getString("ID_FINALISTE")
                    };
                    modelM.addRow(line);
                }
            }
        }catch (Exception e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void btnVqMActionPerformed(ActionEvent evt) {
        String txt = tfSearchM.getText();
        String query;
        try {
            //modelM2.setRowCount(0);
            if (!txt.equals("")) {
                if (isNom) {
                    query = "SELECT * FROM MATCH_TENNIS WHERE ID_VAINQUEUR IN (SELECT ID FROM JOUEUR WHERE NOM LIKE '%"
                        + txt + "%');";
                } else if (isPrenom) {
                    query = "SELECT * FROM MATCH_TENNIS WHERE ID_VAINQUEUR IN (SELECT ID FROM JOUEUR WHERE PRENOM LIKE '%"
                        + txt + "%');";
                } else {
                    query = "SELECT * FROM MATCH_TENNIS WHERE ID_VAINQUEUR IN (SELECT ID FROM JOUEUR WHERE NOM LIKE '%"
                        + txt + "%' OR PRENOM LIKE '%" + txt + "%');";
                }
                System.out.println(query);
                System.out.println(isNom);
                System.out.println(isPrenom);
                modelM.setRowCount(0);
                ResultSet rs = con.s.executeQuery(query);
                while(rs.next()){
                    String[] line = {
                        rs.getString("ID"), rs.getString("ID_EPREUVE"), rs.getString("ID_VAINQUEUR"), rs.getString("ID_FINALISTE")
                    };
                    modelM.addRow(line);
                }
            } 
            modelM2.setRowCount(0);
            int rowCount = tabM1.getRowCount();
            for (int i = 0; i < rowCount; i++) {
                int id = Integer.parseInt(modelM.getValueAt(i,2).toString());
                String q = "SELECT Nom, Prenom, Sexe FROM JOUEUR where Id =" + id;
                ResultSet rs2 = con.s.executeQuery(q);
                while(rs2.next()){
                    String[] line = {
                        rs2.getString("NOM"), rs2.getString("PRENOM"), rs2.getString("SEXE")
                    };
                    modelM2.addRow(line);
                }
            } 
        } catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void btnFiMActionPerformed(ActionEvent evt) {
        String txt = tfSearchM.getText();
        String query;
        try {
            //modelM2.setRowCount(0);
            if (!txt.equals("")) {
                if (isNom) {
                    query = "SELECT * FROM MATCH_TENNIS WHERE ID_FINALISTE IN (SELECT ID FROM JOUEUR WHERE NOM LIKE '%"
                        + txt + "%');";
                } else if (isPrenom){
                    query = "SELECT * FROM MATCH_TENNIS WHERE ID_FINALISTE IN (SELECT ID FROM JOUEUR WHERE PRENOM LIKE '%"
                        + txt + "%');";
                } else {
                    query = "SELECT * FROM MATCH_TENNIS WHERE ID_FINALISTE IN (SELECT ID FROM JOUEUR WHERE NOM LIKE '%"
                        + txt + "%' OR PRENOM LIKE '%" + txt + "%');";
                }
                System.out.println(query);
                System.out.println(isNom);
                System.out.println(isPrenom);
                modelM.setRowCount(0);
                ResultSet rs = con.s.executeQuery(query);
                while(rs.next()){
                    String[] line = {
                        rs.getString("ID"), rs.getString("ID_EPREUVE"), rs.getString("ID_VAINQUEUR"), rs.getString("ID_FINALISTE")
                    };
                    modelM.addRow(line);
                }
            } 
            modelM2.setRowCount(0);
            int rowCount = tabM1.getRowCount();
            for (int i = 0; i < rowCount; i++) {
                int id = Integer.parseInt(modelM.getValueAt(i,3).toString());
                String q = "SELECT Nom, Prenom, Sexe FROM JOUEUR where Id =" + id;
                ResultSet rs2 = con.s.executeQuery(q);
                while(rs2.next()){
                    String[] line = {
                        rs2.getString("NOM"), rs2.getString("PRENOM"), rs2.getString("SEXE")
                    };
                    modelM2.addRow(line);
                }
            } 
        } catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void btnReMActionPerformed(ActionEvent evt) {
        updateM();
        isNom = false;
        isPrenom = false;
        buttonGroup2.clearSelection();
        tfSearchM.setText("");
        modelM2.setRowCount(0);
    }
    
    private void btnSearchEActionPerformed(ActionEvent evt) {
        try{
            String yr = tfYrE.getText();
            String type = tfTypeE.getText();
            String query = "SELECT NOM, PRENOM FROM JOUEUR WHERE ID IN (SELECT ID_VAINQUEUR FROM MATCH_TENNIS WHERE ID_EPREUVE IN (SELECT ID FROM EPREUVE WHERE ANNEE='"
                    +yr+"' AND TYPE_EPREUVE='"+type+"')) UNION SELECT NOM, PRENOM FROM JOUEUR WHERE ID IN (SELECT ID_FINALISTE FROM MATCH_TENNIS WHERE ID_EPREUVE IN (SELECT ID FROM EPREUVE WHERE ANNEE='"
                    +yr+"' AND TYPE_EPREUVE='"+type+"'));";
            if(!yr.equals("") && !type.equals("")) {
                System.out.println(yr);
                System.out.println(type);
                System.out.println(query);
                modelE2.setRowCount(0);
                ResultSet rs = con.s.executeQuery(query);
                while(rs.next()){
                    String[] line = {
                        rs.getString("NOM"), rs.getString("PRENOM")
                    };
                    System.out.println(Arrays.toString(line));
                    modelE2.addRow(line);
                }
            }
        } catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void btnReEActionPerformed(ActionEvent evt) {
        updateE();
        tfYrE.setText("");
        tfTypeE.setText("");
        modelE2.setRowCount(0);
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TennisDesktop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TennisDesktop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TennisDesktop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TennisDesktop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TennisDesktop().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddJ;
    private javax.swing.JButton btnAddT;
    private javax.swing.JButton btnDelJ;
    private javax.swing.JButton btnDelT;
    private javax.swing.JButton btnEditJ;
    private javax.swing.JButton btnEditT;
    private javax.swing.JButton btnFiM;
    private javax.swing.JButton btnReE;
    private javax.swing.JButton btnReJ;
    private javax.swing.JButton btnReM;
    private javax.swing.JButton btnReT;
    private javax.swing.JButton btnSearchE;
    private javax.swing.JButton btnSearchJ;
    private javax.swing.JButton btnSearchM;
    private javax.swing.JButton btnSearchT;
    private javax.swing.JButton btnVqM;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton rbF;
    private javax.swing.JRadioButton rbH;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButton rbNomM;
    private javax.swing.JRadioButton rbPrenomM;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tabE1;
    private javax.swing.JTable tabE2;
    private javax.swing.JTable tabJ;
    private javax.swing.JTable tabM1;
    private javax.swing.JTable TabM2;
    private javax.swing.JTable tabT;
    private javax.swing.JTextField tfCodeT;
    private javax.swing.JTextField tfIdJ;
    private javax.swing.JTextField tfIdT;
    private javax.swing.JTextField tfNomJ;
    private javax.swing.JTextField tfNomT;
    private javax.swing.JTextField tfPrenomJ;
    private javax.swing.JTextField tfSearchJ;
    private javax.swing.JTextField tfSearchT;
    private javax.swing.JTextField tfSearchM;
    private javax.swing.JTextField tfTypeE;
    private javax.swing.JTextField tfYrE;
    private javax.swing.JComboBox<String> cboxSexe;
    // End of variables declaration//GEN-END:variables
}